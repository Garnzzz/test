#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
    quick-tap-ms = <115>;
    require-prior-idle-ms = <80>;
    hold-trigger-on-release;
    hold-trigger-key-positions = <31 34>;
};

&mt {
    quick-tap-ms = <115>;
    require-prior-idle-ms = <50>;
    flavor = "balanced";
    hold-trigger-key-positions = <11 12 13 14 30 32 33 16 17 18>;
    hold-trigger-on-release;
};

/ {
        /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 3 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    // #define BASE    0
    // #define LOWER   1
    // #define RAISE   2
    // #define MEDIA   3
    // #define CHANGE  4
    // #define SNIPER  5
    // #define SCROLL  6

    combos {
        compatible = "zmk,combos";

        LH.Lclick {
            bindings = <&mkp LCLK>;
            key-positions = <23 22>;
        };

        LH.Rclick {
            bindings = <&mkp RCLK>;
            key-positions = <22 21>;
        };

        LH.Mclick {
            bindings = <&mkp MB3>;
            key-positions = <21 22 23>;
        };

        OSM_Shift {
            bindings = <&sk LSHFT>;
            key-positions = <29 28>;
        };

        CHG {
            bindings = <&to 4>;
            key-positions = <31 34>;
            layers = <0>;
        };

        Base {
            bindings = <&to 0>;
            key-positions = <31 34>;
            layers = <4>;
        };

        Select_All {
            bindings = <&kp LC(A)>;
            key-positions = <0 1>;
        };
    };

    behaviors {
        sf_shift: sf_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "SF_SHIFT";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q               &kp W           &kp E           &kp R             &kp T          &mt DEL Y       &kp U              &kp I            &kp O            &kp P
&mt LEFT_CONTROL A  &mt LEFT_GUI S  &mt LEFT_ALT D  &mt LEFT_SHIFT F  &kp G          &mt HOME H      &mt RIGHT_SHIFT J  &mt RIGHT_ALT K  &mt RIGHT_GUI L  &mt SEMI APOS
&mt LC(Z) Z         &mt LC(X) X     &mt LC(C) C     &mt LC(V) V       &kp B          &mt END N       &kp M              &kp COMMA        &kp DOT          &lt 3 SLASH
                                    &to 3           &lt 1 BACKSPACE   &mt RET TAB    &mt ESCAPE RET  &lt 2 SPACE
            >;

            label = "BASE";
        };

        LWR {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp NUMBER_4       &kp N5     &kp NUMBER_6   &kp N7     &kp N8     &kp N9  &kp N0
&mt LCTRL F1  &kp F2        &mt LEFT_ALT F3  &mt LEFT_SHIFT F4  &kp F5     &kp F6         &kp F7     &kp F8     &kp F9  &kp LS(F10)
&kp LC(Z)     &kp LC(X)     &kp LC(C)        &kp LC(CAPS)       &kp F11    &kp F12        &kp COLON  &kp SLASH  &trans  &mt PAUSE_BREAK MINUS
                            &trans           &trans             &trans     &kp BACKSPACE  &kp RET
            >;

            label = "LOWER";
        };

        RSE {
            bindings = <
&kp EXCL   &kp AT      &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET    &kp RIGHT_PARENTHESIS  &kp PERCENT     &kp EQUAL
&kp LCTRL  &kp DOLLAR  &kp UNDER             &kp LSHFT         &kp ASTRK         &kp PAGE_UP      &kp LEFT_ARROW       &kp UP_ARROW           &kp DOWN_ARROW  &kp RIGHT
&kp POUND  &kp CARET   &kp PLUS              &kp AMPS          &kp PIPE          &kp PAGE_DOWN    &kp LA(PRINTSCREEN)  &none                  &none           &mt PAUSE_BREAK QUESTION
                       &trans                &trans            &trans            &trans           &trans
            >;

            label = "RAISE";
        };

        MED {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3      &bt BT_SEL 4    &ext_power EP_TOG  &out OUT_TOG  &none      &none     &bt BT_CLR
&kp C_MUTE    &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &none           &none              &mkp LCLK     &mkp RCLK  &none     &none
&none         &none         &kp C_PREV       &kp C_NEXT        &none           &none              &mkp MCLK     &mkp MB4   &mkp MB5  &none
                            &to 0            &none             &none           &none              &none
            >;

            label = "MEDIA";
        };

        CHG {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5      &kp NUMBER_6  &kp N7     &kp N8        &kp N9    &kp N0
&kp LCTRL     &kp LEFT_GUI  &kp LEFT_ALT  &kp LSHFT     &kp HOME    &kp DEL       &kp LEFT   &kp UP_ARROW  &kp DOWN  &kp RIGHT
&kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp END     &none         &kp COLON  &kp MINUS     &trans    &studio_unlock
                            &kp ESCAPE    &trans        &trans      &trans        &trans
            >;

            label = "CHANGE";
        };

        /* layer_2 {
            bindings = <
&none  &none   &none    &none   &none         &none         &kp N1         &none         &none     &none  &none   &to 0
&none  &none   &none    &none   &none         &none         &none         &none          &rgb_ug RGB_BRD &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &rgb_ug RGB_TOG
&none  &none   &none    &none   &none         &none         &none         &mkp LCLK     &mkp RCLK  &none  &none   &none
&none  &none   &none    &none   &bt BT_NXT  &bt BT_CLR    &none         &none         &none     &none  &none   &none
                                   &none         &none         &none         &none         &none
                                                 &none         &none         &none
            >;
       
            
        };

       Mouse {
            bindings = <
&none        &none         &none         &none         &none      &none         &none       &none      &none         &none         &none         &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none      &bt BT_CLR    &bt BT_CLR  &none      &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
&none        &trans        &trans        &mkp MCLK     &trans     &none         &none       &trans     &mkp MCLK     &trans        &trans        &none
&bootloader  &trans        &mkp RCLK     &mo 4         &mkp LCLK  &mo 5         &mo 5       &mkp LCLK  &mo 4         &mkp RCLK     &trans        &bootloader
                                         &mo 5         &mkp LCLK  &mkp RCLK     &mkp RCLK   &mkp LCLK
                                                       &none      &trans        &trans
            >;

            
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
                
                
               
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
                
                
        };*/
    };
};
